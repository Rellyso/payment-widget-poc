name: 🚀 Build & Deploy

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "22"
  REGISTRY_URL: "https://registry.npmjs.org"

jobs:
  # ==============================================================================
  # TESTES E QUALIDADE DE CÓDIGO
  # ==============================================================================
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Type check
        run: npm run type-check

      # temporarily disabled
      # - name: ✨ Lint code
      #   run: npm run lint

      - name: 🏗️ Build all targets
        run: |
          npm run build:sdk
          npm run build:cdn
          npm run build:bootstrap

      - name: 📊 Bundle analysis
        run: |
          echo "## 📦 Bundle Sizes" >> $GITHUB_STEP_SUMMARY
          echo "| Target | File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|------|---------|" >> $GITHUB_STEP_SUMMARY

          # SDK sizes
          sdk_size=$(stat -c%s "dist/sdk/index.es.js" | numfmt --to=iec)
          sdk_gz=$(gzip -c "dist/sdk/index.es.js" | wc -c | numfmt --to=iec)
          echo "| SDK | index.es.js | $sdk_size | $sdk_gz |" >> $GITHUB_STEP_SUMMARY

          # CDN sizes  
          cdn_size=$(stat -c%s "dist/cdn/widget.v1.min.umd.cjs" | numfmt --to=iec)
          cdn_gz=$(gzip -c "dist/cdn/widget.v1.min.umd.cjs" | wc -c | numfmt --to=iec)
          echo "| CDN | widget.v1.min.js | $cdn_size | $cdn_gz |" >> $GITHUB_STEP_SUMMARY

          # Bootstrap sizes
          boot_size=$(stat -c%s "dist/bootstrap/widget-bootstrap.v1.min.umd.cjs" | numfmt --to=iec)
          boot_gz=$(gzip -c "dist/bootstrap/widget-bootstrap.v1.min.umd.cjs" | wc -c | numfmt --to=iec)
          echo "| Bootstrap | widget-bootstrap.v1.min.js | $boot_size | $boot_gz |" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  # ==============================================================================
  # PUBLICAÇÃO NO NPM
  # ==============================================================================
  publish-npm:
    name: 📦 Publish to npm
    runs-on: ubuntu-latest
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build SDK
        run: npm run build:sdk

      - name: 🔍 Validate package
        run: |
          npm pack --dry-run
          npx publint

      - name: 📦 Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📋 Create release notes
        uses: actions/github-script@v7
        with:
          script: |
            const { readFileSync } = require('fs');
            const package = JSON.parse(readFileSync('package.json', 'utf8'));

            const release_notes = `
            ## 🚀 Release ${package.version}

            ### 📦 Instalação
            \`\`\`bash
            npm install cartao-simples-widget@${package.version}
            \`\`\`

            ### 🔗 Links úteis
            - 📖 [Documentação](https://docs.cartaosimples.com/widget)
            - 📦 [npm package](https://www.npmjs.com/package/cartao-simples-widget)
            - 🔍 [CDN Assets](https://cdn.cartaosimples.com/)

            ### 📊 Bundle sizes
            - SDK: ~80KB gzipped
            - CDN: ~122KB gzipped  
            - Bootstrap: ~1.8KB gzipped
            `;

            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Release ${package.version}`,
              body: release_notes,
              draft: false,
              prerelease: package.version.includes('-')
            });

  # ==============================================================================
  # DEPLOY STAGING
  # ==============================================================================
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build CDN & Bootstrap
        run: |
          npm run build:cdn
          npm run build:bootstrap

      - name: ☁️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 📤 Deploy to S3
        run: |
          # Bootstrap (cache curto)
          aws s3 cp dist/bootstrap/widget-bootstrap.v1.min.umd.cjs \
            s3://cartao-simples-widget-staging/widget-bootstrap.v1.min.js \
            --content-type "application/javascript" \
            --cache-control "public, max-age=300"
            
          # CDN bundle (cache médio para staging)
          aws s3 cp dist/cdn/widget.v1.min.umd.cjs \
            s3://cartao-simples-widget-staging/widget.v1.min.js \
            --content-type "application/javascript" \
            --cache-control "public, max-age=3600"
            
          # CSS
          aws s3 cp dist/cdn/widget.v1.min.css \
            s3://cartao-simples-widget-staging/widget.v1.min.css \
            --content-type "text/css" \
            --cache-control "public, max-age=3600"

      - name: 🔄 Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} \
            --paths "/*"

  # ==============================================================================
  # DEPLOY PRODUÇÃO
  # ==============================================================================
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: [test, publish-npm]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build CDN & Bootstrap
        run: |
          npm run build:cdn
          npm run build:bootstrap

      - name: 🔐 Generate SRI hashes
        run: |
          bootstrap_hash=$(openssl dgst -sha384 -binary "dist/bootstrap/widget-bootstrap.v1.min.umd.cjs" | openssl base64 -A)
          cdn_hash=$(openssl dgst -sha384 -binary "dist/cdn/widget.v1.min.umd.cjs" | openssl base64 -A)

          echo "## 🔐 SRI Hashes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Bootstrap: \`sha384-$bootstrap_hash\`" >> $GITHUB_STEP_SUMMARY  
          echo "CDN: \`sha384-$cdn_hash\`" >> $GITHUB_STEP_SUMMARY

          cat > sri-hashes.json << EOF
          {
            "bootstrap": "sha384-$bootstrap_hash",
            "cdn": "sha384-$cdn_hash",
            "generated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF

      - name: ☁️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 📤 Deploy to S3
        run: |
          # Bootstrap (cache curto)
          aws s3 cp dist/bootstrap/widget-bootstrap.v1.min.umd.cjs \
            s3://cartao-simples-widget-production/widget-bootstrap.v1.min.js \
            --content-type "application/javascript" \
            --cache-control "public, max-age=300" \
            --metadata-directive REPLACE
            
          # CDN bundle (cache longo)
          aws s3 cp dist/cdn/widget.v1.min.umd.cjs \
            s3://cartao-simples-widget-production/widget.v1.min.js \
            --content-type "application/javascript" \
            --cache-control "public, max-age=31536000" \
            --metadata-directive REPLACE
            
          # CSS (cache longo)
          aws s3 cp dist/cdn/widget.v1.min.css \
            s3://cartao-simples-widget-production/widget.v1.min.css \
            --content-type "text/css" \
            --cache-control "public, max-age=31536000" \
            --metadata-directive REPLACE
            
          # SRI hashes
          aws s3 cp sri-hashes.json \
            s3://cartao-simples-widget-production/sri-hashes.json \
            --content-type "application/json" \
            --cache-control "public, max-age=300"

      - name: 🔄 Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} \
            --paths "/*"

      - name: 📊 Test deployment
        run: |
          sleep 30  # Aguardar propagação

          # Testar bootstrap
          curl -f -s "https://cdn.cartaosimples.com/widget-bootstrap.v1.min.js" > /dev/null
          echo "✅ Bootstrap acessível"

          # Testar CDN
          curl -f -s "https://cdn.cartaosimples.com/widget.v1.min.js" > /dev/null  
          echo "✅ CDN bundle acessível"

          # Verificar tamanhos
          bootstrap_size=$(curl -s "https://cdn.cartaosimples.com/widget-bootstrap.v1.min.js" | wc -c)
          echo "📊 Bootstrap size: $(echo $bootstrap_size | numfmt --to=iec)"

          if [ $bootstrap_size -gt 10240 ]; then  # 10KB
            echo "⚠️ Bootstrap maior que 10KB"
            exit 1
          fi

  # ==============================================================================
  # NOTIFICAÇÕES
  # ==============================================================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📱 Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-production.result }}
          channel: "#deploys"
          text: |
            🚀 *Cartão Simples Widget Deploy*

            *Tag:* ${{ github.ref_name }}
            *Status:* ${{ needs.deploy-production.result }}
            *Actor:* ${{ github.actor }}

            *Links:*
            • [npm package](https://www.npmjs.com/package/cartao-simples-widget)
            • [CDN](https://cdn.cartaosimples.com/)
            • [Docs](https://docs.cartaosimples.com/widget)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
